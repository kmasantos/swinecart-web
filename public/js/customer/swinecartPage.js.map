{"version":3,"sources":["swinecartPage.js"],"names":[],"mappingsfile":"swinecartPage.js","sourcesContent":["\"use strict\";\n\n// This is the event hub we'll use in every\n// component to communicate between them.\nvar eventHub = new Vue();\n\nVue.component(\"average-star-rating\", {\n  template: \"#average-star-rating\",\n  props: [\"rating\"],\n  computed: {\n    ratingToPercentage: function() {\n      return (100 * this.rating) / 5;\n    }\n  }\n});\n\nVue.component(\"star-rating\", {\n  template: \"#star-rating-template\",\n  props: [\"type\"],\n  data: function() {\n    return {\n      starValues: [\n        {\n          class: \"\",\n          icon: \"\"\n        },\n        {\n          class: \"\",\n          icon: \"\"\n        },\n        {\n          class: \"\",\n          icon: \"\"\n        },\n        {\n          class: \"\",\n          icon: \"\"\n        },\n        {\n          class: \"\",\n          icon: \"\"\n        }\n      ],\n      normalClass: \"grey-text text-darken-2\",\n      toggledClass: \"yellow-text text-darken-1\",\n      normalIcon: \"star_border\",\n      toggledIcon: \"star\",\n      clicked: 0\n    };\n  },\n  methods: {\n    animateHover: function(order) {\n      if (!this.clicked) {\n        // Designate appropriate classes to the stars\n        this.toggleClasses(order);\n        this.normalizeClasses(order);\n      }\n    },\n\n    deanimateHover: function() {\n      if (!this.clicked) this.normalizeClasses(-1);\n    },\n\n    getValue: function(value) {\n      this.clicked = 1;\n\n      // Designate appropriate classes to the stars\n      this.toggleClasses(value);\n      this.normalizeClasses(value);\n\n      // Notify Order Details component of rating value set\n      switch (this.type) {\n        case \"delivery\":\n          this.$emit(\"set-delivery-rating\", value + 1);\n          break;\n        case \"transaction\":\n          this.$emit(\"set-transaction-rating\", value + 1);\n          break;\n        case \"productQuality\":\n          this.$emit(\"set-product-rating\", value + 1);\n          break;\n        default:\n          break;\n      }\n    },\n\n    normalizeClasses: function(order) {\n      for (var i = order + 1; i < 5; i++) {\n        this.starValues[i].class = this.normalClass;\n        this.starValues[i].icon = this.normalIcon;\n      }\n    },\n\n    toggleClasses: function(order) {\n      for (var i = 0; i <= order; i++) {\n        this.starValues[i].class = this.toggledClass;\n        this.starValues[i].icon = this.toggledIcon;\n      }\n    }\n  },\n  created: function() {\n    // Normalize classes of stars\n    this.normalizeClasses(-1);\n  }\n});\n\nVue.component(\"quantity-input\", {\n  template:\n    '\\\n        <span class=\"col s12\" style=\"padding:0;\"> \\\n            <input type=\"text\" \\\n                ref=\"input\" \\\n                class=\"center-align remove-borders\" \\\n                style=\"margin:0;\" \\\n                :value=\"value\" \\\n                @input=\"updateValue($event.target.value)\" \\\n                @focus=\"selectAll\" \\\n                @blur=\"formatValue\" \\\n            > \\\n        </span> \\\n    ',\n  props: {\n    value: {\n      type: Number\n    }\n  },\n  methods: {\n    updateValue: function(value) {\n      var resultValue = this.validateQuantity(value);\n      this.$refs.input.value = resultValue;\n      this.$emit(\"input\", resultValue);\n    },\n\n    selectAll: function(event) {\n      setTimeout(function() {\n        event.target.select();\n      }, 0);\n    },\n\n    formatValue: function() {\n      this.$refs.input.value = this.validateQuantity(this.value);\n    },\n\n    validateQuantity: function(value) {\n      var parsedValue = _.toNumber(value);\n      if (_.isFinite(parsedValue) && parsedValue > 0) {\n        // If it is a number check if it is divisible by 2\n        if (parsedValue % 2 !== 0) return parsedValue + 1;\n        else return parsedValue;\n      } else return 2;\n    }\n  }\n});\nVue.component(\"multiplier-quantity-input\", {\n  template: `\n    <div class=\"row\">\n      <span class=\"col s4\">Quantity:</span>\n      <input type=\"text\"\n        ref=\"input\"\n        class=\"col s3 center-align remove-borders\"\n        :value=\"value\"\n        style=\"margin:0;\"\n        @focus=\"selectAll\"\n        @input=\"updateValue($event.target.value)\"\n        placeholder=\"Enter request quantity\"\n      >\n    </div>\n  `,\n  props: {\n    value: {\n      type: Number\n    }\n  },\n  methods: {\n    updateValue: function(value) {\n      var resultValue = this.validateQuantity(value);\n      this.$refs.input.value = resultValue;\n      this.$emit(\"input\", resultValue);\n    },\n\n    selectAll: function(event) {\n      setTimeout(function() {\n        event.target.select();\n      }, 0);\n    },\n\n    formatValue: function() {\n      this.$refs.input.value = this.validateQuantity(this.value);\n    },\n\n    validateQuantity: function(value) {\n      var parsedValue = _.toNumber(value);\n      if (_.isFinite(parsedValue) && parsedValue > 0) {\n        // If it is a number check if it is divisible by 2\n        if (parsedValue % 2 !== 0) return parsedValue + 1;\n        else return parsedValue;\n      } else return 2;\n    }\n  }\n});\n\nVue.component(\"custom-date-select\", {\n  template:\n    '\\\n        <div> \\\n            <input type=\"date\" id=\"date-needed\" name=\"date-needed\" class=\"datepicker remove-borders\" ref=\"select\" :value=\"value\"/> \\\n            <label for=\"date-needed\" class=\"grey-text text-darken-3\">Date Needed</label> \\\n        </div> \\\n    ',\n  props: [\"value\"],\n  mounted: function() {\n    $(\".datepicker\").pickadate({\n      min: true,\n      selectMonths: true,\n      selectYears: 2,\n      format: \"mmmm d, yyyy\"\n    });\n\n    // prevent the date picker from instatly closing upon clicking\n    // Materialize bug\n    $(\".datepicker\").on(\"mousedown\", function(event) {\n      event.preventDefault();\n    });\n\n    var self = this;\n    $(\"#date-needed\").on(\"change\", function() {\n      self.$emit(\"date-select\", self.$refs.select.value);\n    });\n  }\n});\n\nVue.component(\"order-details\", {\n  template: \"#order-details-template\",\n  props: [\"products\", \"token\"],\n  data: function() {\n    return {\n      productRemove: {\n        index: 0,\n        name: \"\",\n        id: 0\n      },\n      productRequest: {\n        index: 0,\n        name: \"\",\n        id: 0,\n        type: \"\",\n        dateNeeded: \"\",\n        specialRequest: \"\"\n      },\n      requestDetails: {\n        name: \"\",\n        type: \"\",\n        dateNeeded: \"\",\n        specialRequest: \"\"\n      },\n      breederRate: {\n        index: 0,\n        breederName: \"\",\n        deliveryValue: 0,\n        transactionValue: 0,\n        productQualityValue: 0,\n        isDeliveryValueFilled: false,\n        isTransactionValueFilled: false,\n        isProductQualityValueFilled: false,\n        isValidToSubmitRate: false,\n        commentField: \"\"\n      }\n    };\n  },\n  filters: {\n    capitalize: function(value) {\n      // Capitalize first letter of word\n      return value[0].toUpperCase() + value.slice(1);\n    },\n\n    transformToDetailedDate: function(value, prepend) {\n      return \"[\" + prepend + \"] \" + moment(value).format(\"MMM D YYYY, h:mmA\");\n    }\n  },\n  computed: {\n    sortedProducts: function() {\n      // Sort Swine Cart items according to its request status\n      return _.sortBy(this.products, [\"request_status\"]);\n    }\n  },\n  methods: {\n    searchProduct: function(itemId) {\n      // Return index of Swine Cart itemId to find\n      for (var i = 0; i < this.products.length; i++) {\n        if (this.products[i].item_id === itemId) return i;\n      }\n    },\n\n    subtractQuantity: function(itemId) {\n      // Update (subtract) product's quantity on root data\n      this.$emit(\"subtract-quantity\", this.searchProduct(itemId));\n    },\n\n    addQuantity: function(itemId) {\n      // Update (add) product's quantity on root data\n      this.$emit(\"add-quantity\", this.searchProduct(itemId));\n    },\n\n    dateChange: function(value) {\n      // Event listener to reflect data change in date select to vue's data\n      this.productRequest.dateNeeded = value;\n\n      // Enable confirm-request-product button if date needed exist\n      if (this.productRequest.dateNeeded) {\n        $(\"#confirm-request-product\").removeAttr(\"disabled\");\n      } else {\n        $(\"#confirm-request-product\").attr(\"disabled\", true);\n      }\n    },\n\n    viewProductModalFromCart: function(itemId) {\n      var index = this.searchProduct(itemId);\n      vm.productInfoModal.imgPath = this.products[index].img_path;\n      vm.productInfoModal.name = this.products[index].product_name;\n      vm.productInfoModal.breeder = this.products[index].breeder;\n      vm.productInfoModal.province = this.products[index].product_province;\n      vm.productInfoModal.type = this.products[index].product_type;\n      vm.productInfoModal.breed = this.products[index].product_breed;\n      vm.productInfoModal.birthdate = this.products[index].product_birthdate;\n      vm.productInfoModal.age = this.products[index].product_age;\n      vm.productInfoModal.adg = this.products[index].product_adg;\n      vm.productInfoModal.fcr = this.products[index].product_fcr;\n      vm.productInfoModal.bft = this.products[index].product_backfat_thickness;\n      vm.productInfoModal.avgDelivery = this.products[index].avg_delivery;\n      vm.productInfoModal.avgTransaction = this.products[index].avg_transaction;\n      vm.productInfoModal.avgProductQuality = this.products[\n        index\n      ].avg_productQuality;\n      vm.productInfoModal.otherDetails = this.products[\n        index\n      ].other_details.split(\",\");\n\n      $(\"#info-modal\").modal({\n        opacity: 0\n      });\n      $(\"#info-modal\").modal(\"open\");\n    },\n\n    viewRequestDetails: function(itemId) {\n      var index = this.searchProduct(itemId);\n      this.requestDetails.name = this.products[index].product_name;\n      this.requestDetails.type = this.products[index].product_type;\n      this.requestDetails.dateNeeded = this.products[index].date_needed;\n      this.requestDetails.specialRequest = this.products[index].special_request;\n\n      $(\"#product-request-details-modal\").modal(\"open\");\n    },\n\n    confirmRemoval: function(itemId) {\n      var index = this.searchProduct(itemId);\n      this.productRemove.index = index;\n      this.productRemove.name = this.products[index].product_name;\n      this.productRemove.id = this.products[index].product_id;\n      $(\"#remove-product-confirmation-modal\").modal(\"open\");\n    },\n\n    removeProduct: function() {\n      var index = this.productRemove.index;\n\n      $(\"#remove-product-confirmation-modal\").modal(\"close\");\n\n      // Do AJAX\n      this.$http\n        .delete(config.swineCart_url + \"/delete\", {\n          body: {\n            _token: this.token,\n            itemId: this.products[index].item_id\n          }\n        })\n        .then(\n          function(response) {\n            var data = response.body;\n\n            // If deletion of item is successful\n            if (data[0] === \"success\") {\n              var span = $(\"#cart-icon span\");\n\n              // Put quantity of Swine Cart to sessionStorage\n              sessionStorage.setItem(\"swine_cart_quantity\", data[2]);\n\n              if (data[2] === 0) {\n                span.html(\"\");\n                span.removeClass(\"badge\");\n                $(\"#cart-icon .material-icons\").removeClass(\"left\");\n                $(\"#cart-dropdown #item-container\").html(\n                  '<li> <span class=\"center-align black-text\"> No items in your Swine Cart </span> </li>'\n                );\n              } else span.html(sessionStorage.getItem(\"swine_cart_quantity\"));\n\n              // Update (remove product) list of products on root data\n              this.$emit(\"remove-product\", index);\n\n              Materialize.toast(\n                data[1] + \" removed from Swine Cart\",\n                2000,\n                \"green lighten-1\"\n              );\n            } else\n              Materialize.toast(\n                data[1] + \" is \" + data[0],\n                2000,\n                \"orange accent-2\"\n              );\n          },\n          function(response) {\n            console.log(response.statusText);\n          }\n        );\n    },\n\n    confirmRequest: function(itemId) {\n      var index = this.searchProduct(itemId);\n      this.productRequest.index = index;\n      this.productRequest.name = this.products[index].product_name;\n      this.productRequest.id = this.products[index].product_id;\n      this.productRequest.type = this.products[index].product_type;\n      this.productRequest.dateNeeded = \"\";\n      this.productRequest.specialRequest = this.products[index].special_request;\n      $(\"#request-product-confirmation-modal\").modal(\"open\");\n    },\n\n    requestProduct: function(event) {\n      var index = this.productRequest.index;\n      var requestButtons = $(\".request-product-buttons\");\n\n      this.disableButtons(\"request\", requestButtons, event.target);\n\n      // Do AJAX\n      this.$http\n        .patch(config.swineCart_url + \"/request\", {\n          _token: this.token,\n          itemId: this.products[index].item_id,\n          productId: this.products[index].product_id,\n          productType: this.products[index].product_type,\n          requestQuantity: this.products[index].request_quantity,\n          dateNeeded: this.productRequest.dateNeeded,\n          specialRequest: this.productRequest.specialRequest\n        })\n        .then(\n          function(response) {\n            var data = response.body;\n            var span = $(\"#cart-icon span\");\n\n            // Update necessary product attributes on root data\n            var updateDetails = {\n              index: index,\n              status: \"requested\",\n              requestStatus: 1,\n              dateNeeded: this.productRequest.dateNeeded,\n              specialRequest: this.productRequest.specialRequest,\n              statusTransaction: data[1].date\n            };\n\n            $(\"#request-product-confirmation-modal\").modal(\"close\");\n            this.$emit(\"product-requested\", updateDetails);\n\n            // Put quantity of Swine Cart to sessionStorage\n            sessionStorage.setItem(\"swine_cart_quantity\", data[0]);\n\n            if (data[0] == 0) {\n              span.html(\"\");\n              span.removeClass(\"badge\");\n              $(\"#cart-icon .material-icons\").removeClass(\"left\");\n              $(\"#cart-dropdown #item-container\").html(\n                '<li> <span class=\"center-align black-text\"> No items in your Swine Cart </span> </li>'\n              );\n            } else span.html(sessionStorage.getItem(\"swine_cart_quantity\"));\n\n            Materialize.toast(\n              this.products[index].product_name + \" requested\",\n              2000,\n              \"green lighten-1\"\n            );\n\n            // Update some DOM elements\n            this.$nextTick(function() {\n              $(\".tooltipped\").tooltip({ delay: 50 });\n              $('label[for=\"special-request\"]').removeClass(\"active\");\n              $('label[for=\"date-needed\"]').removeClass(\"active\");\n              this.enableButtons(\"request\", requestButtons, event.target);\n            });\n          },\n          function(response) {\n            console.log(response.statusText);\n          }\n        );\n    },\n\n    showRateModal: function(itemId) {\n      $(\"#rate-modal\").modal(\"open\");\n\n      var index = this.searchProduct(itemId);\n      this.breederRate.index = index;\n      this.breederRate.breederName = this.products[index].breeder;\n    },\n\n    rateAndRecord: function(event) {\n      var index = this.breederRate.index;\n      var rateButtons = $(\".rate-breeder-buttons\");\n\n      this.disableButtons(\"rate\", rateButtons, event.target);\n\n      // Do AJAX\n      this.$http\n        .post(config.swineCart_url + \"/rate\", {\n          _token: this.token,\n          breederId: this.products[index].breeder_id,\n          customerId: this.products[index].customer_id,\n          productId: this.products[index].product_id,\n          delivery: this.breederRate.deliveryValue,\n          transaction: this.breederRate.transactionValue,\n          productQuality: this.breederRate.productQualityValue,\n          comment: this.breederRate.commentField\n        })\n        .then(\n          function(response) {\n            $(\"#rate-modal\").modal(\"close\");\n            Materialize.toast(\n              this.products[index].breeder + \" rated\",\n              2000,\n              \"green lighten-1\"\n            );\n\n            // Update local storage of the ratings modal\n            this.breederRate.commentField = \"\";\n            this.breederRate.deliveryValue = 0;\n            this.breederRate.transactionValue = 0;\n            this.breederRate.productQualityValue = 0;\n\n            // Put the rated product to transaction-history component\n            this.$emit(\"update-history\", { index: index });\n\n            this.enableButtons(\"rate\", rateButtons, event.target);\n          },\n          function(response) {\n            console.log(response.statusText);\n          }\n        );\n\n      // Normalize classes of rating modal\n      this.$refs.delivery.normalizeClasses(-1);\n      this.$refs.transaction.normalizeClasses(-1);\n      this.$refs.productQuality.normalizeClasses(-1);\n    },\n\n    disableButtons: function(operation, buttons, actionBtnElement) {\n      buttons.addClass(\"disabled\");\n\n      switch (operation) {\n        case \"request\":\n          actionBtnElement.innerHTML = \"Requesting ...\";\n\n          break;\n        case \"rate\":\n          actionBtnElement.innerHTML = \"Rating ...\";\n\n          break;\n        default:\n          break;\n      }\n    },\n\n    enableButtons: function(operation, buttons, actionBtnElement) {\n      buttons.removeClass(\"disabled\");\n\n      switch (operation) {\n        case \"request\":\n          actionBtnElement.innerHTML = \"Yes\";\n\n          break;\n        case \"rate\":\n          actionBtnElement.innerHTML = \"Rate\";\n\n          break;\n        default:\n          break;\n      }\n    },\n\n    setDeliveryRating: function(value) {\n      // Listener to 'set-delivery-rating' from 'star-rating' component\n      this.breederRate.deliveryValue = value;\n      this.breederRate.isDeliveryValueFilled = true;\n    },\n\n    setTransactionRating: function(value) {\n      // Listener to 'set-transaction-rating' from 'star-rating' component\n      this.breederRate.transactionValue = value;\n      this.breederRate.isTransactionValueFilled = true;\n    },\n\n    setProductRating: function(value) {\n      // Listener to 'set-product-rating' from 'star-rating' component\n      this.breederRate.productQualityValue = value;\n      this.breederRate.isProductQualityValueFilled = true;\n    }\n  }\n});\n\nVue.component(\"transaction-history\", {\n  template: \"#transaction-history-template\",\n  props: [\"history\"],\n  data: function() {\n    return {};\n  },\n  filters: {\n    capitalize: function(value) {\n      // Capitalize first letter of word\n      if (value) {\n        var str = value;\n        return str[0].toUpperCase() + str.slice(1);\n      }\n      return \"\";\n    },\n\n    transformToDetailedDate: function(value) {\n      return moment(value).format(\"MMM D YYYY, h:mmA\");\n    },\n\n    transformToReadableStatus: function(value) {\n      return _.startCase(value);\n    }\n  },\n  methods: {\n    viewProductModalFromHistory: function(index) {\n      vm.productInfoModal.imgPath = this.history[\n        index\n      ].product_details.l_img_path;\n      vm.productInfoModal.name = this.history[index].product_details.name;\n      vm.productInfoModal.breeder = this.history[\n        index\n      ].product_details.breeder_name;\n      vm.productInfoModal.province = this.history[\n        index\n      ].product_details.farm_from;\n      vm.productInfoModal.type = this.history[index].product_details.type;\n      vm.productInfoModal.breed = this.history[index].product_details.breed;\n      vm.productInfoModal.birthdate = moment(\n        this.history[index].product_details.birthdate\n      ).format(\"MMMM D, YYYY\");\n      vm.productInfoModal.age = moment().diff(\n        moment(this.history[index].product_details.birthdate),\n        \"days\"\n      );\n      vm.productInfoModal.adg = this.history[index].product_details.adg;\n      vm.productInfoModal.fcr = this.history[index].product_details.fcr;\n      vm.productInfoModal.bft = this.history[index].product_details.bft;\n      vm.productInfoModal.avgDelivery = this.history[\n        index\n      ].product_details.avg_delivery;\n      vm.productInfoModal.avgTransaction = this.history[\n        index\n      ].product_details.avg_transaction;\n      vm.productInfoModal.avgProductQuality = this.history[\n        index\n      ].product_details.avg_productQuality;\n      vm.productInfoModal.otherDetails = this.history[\n        index\n      ].product_details.other_details.split(\",\");\n\n      $(\"#info-modal\").modal({\n        opacity: 0\n      });\n      $(\"#info-modal\").modal(\"open\");\n    },\n\n    reverseArray: function(value) {\n      var tempArray = _.takeRight(value, 3);\n      return _.reverse(tempArray);\n    },\n\n    trimmedArray: function(value) {\n      var tempArray = _.take(value, value.length);\n      return _.slice(_.reverse(tempArray), 3);\n    },\n\n    toggleShowFullLogs: function(key) {\n      this.history[key].showFullLogs = !this.history[key].showFullLogs;\n    }\n  }\n});\n\n// Root component\nvar vm = new Vue({\n  el: \"#swine-cart-container\",\n  data: {\n    topic: window.pubsubTopic,\n    products: rawProducts,\n    history: [],\n    selectedOrdersTab: true,\n    productInfoModal: {\n      imgPath: \"\",\n      name: \"\",\n      breeder: \"\",\n      farm_province: \"\",\n      type: \"\",\n      breed: \"\",\n      birthdate: \"\",\n      age: 0,\n      adg: 0,\n      fcr: 0,\n      bft: 0,\n      avgDelivery: 0,\n      avgTransaction: 0,\n      avgProductQuality: 0,\n      otherDetails: []\n    }\n  },\n  computed: {\n    capitalizedProductType: function() {\n      // Capitalize first letter of the word\n      if (this.productInfoModal.type) {\n        var str = this.productInfoModal.type;\n        return str[0].toUpperCase() + str.slice(1);\n      }\n      return \"\";\n    }\n  },\n  methods: {\n    searchProduct: function(swineCart_id) {\n      // Return index of Swine Cart itemId to find\n      for (var i = 0; i < this.products.length; i++) {\n        if (this.products[i].item_id === swineCart_id) return i;\n      }\n    },\n\n    subtractProductQuantity: function(index) {\n      // Listener to 'subtract-quantity' from order-details component\n      if (this.products[index].request_quantity > 2)\n        this.products[index].request_quantity -= 2;\n    },\n\n    addProductQuantity: function(index) {\n      // Listener to 'add-quantity' from order-details component\n      this.products[index].request_quantity += 2;\n    },\n\n    updateHistory: function(updateDetails) {\n      // Listener to 'update-history' from order-details component\n      this.products.splice(updateDetails.index, 1);\n    },\n\n    removeProduct: function(index) {\n      // Listener to 'remove-product' from order-details component\n      this.products.splice(index, 1);\n    },\n\n    productRequested: function(updateDetails) {\n      var index = updateDetails.index;\n      this.products[index].status = \"requested\";\n      this.products[index].request_status = 1;\n      this.products[index].date_needed = updateDetails.dateNeeded;\n      this.products[index].special_request = updateDetails.specialRequest;\n      this.products[index].status_transactions[\"requested\"] =\n        updateDetails.statusTransaction;\n    },\n\n    getTransactionHistory: function(customerId) {\n      // Do AJAX\n      this.$http\n        .get(config.swineCart_url + \"/transaction-history\", {\n          params: { customerId: customerId }\n        })\n        .then(\n          function(response) {\n            // Store fetched data in local component data\n            this.history = response.body.data.history;\n          },\n          function(response) {\n            console.log(response.statusText);\n          }\n        );\n    },\n\n    changeBreadCrumbs: function() {\n      // Change the value of final breadcrumbs\n      const bc = document.querySelector(\"#swinecart-breadcrumb #active-tab\");\n      if (this.selectedOrdersTab) {\n        bc.innerHTML = \"Transaction History\";\n        this.selectedOrdersTab = false;\n      } else {\n        bc.innerHTML = \"Orders\";\n        this.selectedOrdersTab = true;\n      }\n    }\n  },\n  filters: {\n    round: function(value) {\n      // Round number according to precision\n      var precision = 2;\n      var factor = Math.pow(10, precision);\n      var tempNumber = value * factor;\n      var roundedTempNumber = Math.round(tempNumber);\n      return roundedTempNumber / factor;\n    }\n  },\n  mounted: function() {\n    var self = this;\n\n    // Determine if connection to websocket server must\n    // be secure depending on the protocol\n    var pubsubServer =\n      location.protocol === \"https:\"\n        ? config.pubsubWSSServer\n        : config.pubsubWSServer;\n\n    // Set-up configuration and subscribe to a topic in the pubsub server\n    var onConnectCallback = function(session) {\n      session.subscribe(self.topic, function(topic, data) {\n        // Update products\n        data = JSON.parse(data);\n        switch (data.type) {\n          case \"sc-reserved\":\n            // Update status\n            var index = self.searchProduct(data.item_id);\n\n            self.products[index].status = \"reserved\";\n            self.products[index].status_transactions.reserved = data.reserved;\n\n            break;\n          case \"sc-onDelivery\":\n            // Update status\n            var index = self.searchProduct(data.item_id);\n\n            self.products[index].status = \"on_delivery\";\n            self.products[index].status_transactions.on_delivery =\n              data.on_delivery;\n\n            /*\n                            format the date to an abbreviated month so\n                            the product cards will not overflow when the\n                            size increase\n                        */\n            self.products[index].delivery_date = moment(\n              data.delivery_date\n            ).format(\"MMM D, YYYY\");\n\n            break;\n          case \"sc-sold\":\n            // Update status\n            var index = self.searchProduct(data.item_id);\n\n            self.products[index].status = \"sold\";\n            self.products[index].status_transactions.sold = data.sold;\n\n            break;\n          case \"sc-cancelTransaction\":\n            // Reset product as just once added to Swine Cart\n            var index = self.searchProduct(data.item_id);\n\n            self.products[index].reservation_id = 0;\n            self.products[index].quantity =\n              self.products[index].type === \"semen\" ? 2 : 1;\n            self.products[index].request_status = 0;\n            self.products[index].date_needed = \"\";\n            self.products[index].special_request = \"\";\n            self.products[index].status = \"displayed\";\n            self.products[index].status_transactions.requested = \"\";\n            self.products[index].status_transactions.reserved = \"\";\n            self.products[index].status_transactions.on_delivery = \"\";\n            self.products[index].status_transactions.sold = \"\";\n\n            break;\n          case \"sc-reservedToOthers\":\n            // Remove product from Swine Cart\n            var index = self.searchProduct(data.item_id);\n\n            self.products.splice(index, 1);\n            Materialize.toast(\"Product is already reserved to others\", 4000);\n\n            break;\n          default:\n            break;\n        }\n\n        // Update some DOM elements\n        self.$nextTick(function() {\n          $(\".tooltipped\").tooltip({ delay: 50 });\n        });\n      });\n    };\n\n    var onHangupCallback = function(code, reason, detail) {\n      console.warn(\"WebSocket connection closed\");\n      console.warn(code + \": \" + reason);\n    };\n\n    var conn = new ab.connect(\n      pubsubServer,\n      onConnectCallback,\n      onHangupCallback,\n      {\n        maxRetries: 30,\n        retryDelay: 2000,\n        skipSubprotocolCheck: true\n      }\n    );\n  }\n});\n"]}